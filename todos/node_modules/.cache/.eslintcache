[{"D:\\react-second\\Todos\\todos\\src\\index.js":"1","D:\\react-second\\Todos\\todos\\src\\App.js":"2","D:\\react-second\\Todos\\todos\\src\\reportWebVitals.js":"3","D:\\react-second\\Todos\\todos\\src\\Components\\TaskInput.jsx":"4","D:\\react-second\\Todos\\todos\\src\\Components\\TaskContainer.jsx":"5","D:\\react-second\\Todos\\todos\\src\\Components\\Categories.jsx":"6","D:\\react-second\\Todos\\todos\\src\\Components\\Task.jsx":"7","D:\\react-second\\Todos\\todos\\src\\Components\\DeleteBtn.jsx":"8","D:\\react-second\\Todos\\todos\\src\\Components\\DoneBtn.jsx":"9","D:\\react-second\\Todos\\todos\\src\\Api.js":"10","D:\\react-second\\Todos\\todos\\src\\Components\\TaskItem.jsx":"11","D:\\react-second\\Todos\\todos\\src\\Components\\DeleteAllCompletedTaskBtn.jsx":"12"},{"size":500,"mtime":499162500000,"results":"13","hashOfConfig":"14"},{"size":2067,"mtime":1640450715283,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":499162500000,"results":"16","hashOfConfig":"14"},{"size":1502,"mtime":1640454381778,"results":"17","hashOfConfig":"14"},{"size":784,"mtime":1640442778851,"results":"18","hashOfConfig":"14"},{"size":920,"mtime":1640448062841,"results":"19","hashOfConfig":"14"},{"size":1343,"mtime":1640443920120,"results":"20","hashOfConfig":"14"},{"size":396,"mtime":1640433690019,"results":"21","hashOfConfig":"14"},{"size":343,"mtime":1640440954367,"results":"22","hashOfConfig":"14"},{"size":1262,"mtime":1640450569477,"results":"23","hashOfConfig":"14"},{"size":391,"mtime":1640453405622,"results":"24","hashOfConfig":"14"},{"size":389,"mtime":1640448056678,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"10l6anv",{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\react-second\\Todos\\todos\\src\\index.js",[],["54","55"],"D:\\react-second\\Todos\\todos\\src\\App.js",[],"D:\\react-second\\Todos\\todos\\src\\reportWebVitals.js",[],"D:\\react-second\\Todos\\todos\\src\\Components\\TaskInput.jsx",["56"],"import React, { useEffect, useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCheck } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst TaskInput = ({ addTask, tasks, toggleTaskCategory }) => {\r\n  const isCompleted = tasks.every((task) => task.category === \"complited\");\r\n\r\n  const [value, setValue] = useState(\"\");\r\n  const [completedTasks, setCompletedTasks] = useState(isCompleted);\r\n\r\n  useEffect(() => {\r\n    setCompletedTasks(isCompleted);\r\n  }, [isCompleted]);\r\n\r\n  const handleOnChange = (e) => {\r\n      setValue(e.target.value);\r\n  };\r\n\r\n  const handleOnKeyPress = (e) => {\r\n    if (e.key == \"Enter\") {\r\n      addTask(value);\r\n      setValue(\"\");\r\n    }\r\n  };\r\n\r\n  const handleOnClick = () => {\r\n    const category = completedTasks ? \"active\" : \"complited\";\r\n    toggleTaskCategory(category);\r\n  };\r\n\r\n  return (\r\n    <div className=\"inputTask\">\r\n      <FontAwesomeIcon\r\n        onClick={handleOnClick}\r\n        icon={faCheck}\r\n        className={`icon ${completedTasks ? \"iconActive\" : \"\"}`}\r\n      />\r\n      <Input\r\n        value={value}\r\n        onChange={handleOnChange}\r\n        onKeyPress={handleOnKeyPress}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskInput;\r\n\r\nconst Input = ({ value, onChange, onKeyPress }) => {\r\n  return (\r\n    <input\r\n      placeholder=\"What needs to be done?\"\r\n      value={value}\r\n      onChange={onChange}\r\n      onKeyPress={onKeyPress}\r\n      type=\"text\"\r\n      maxLength={100}\r\n    />\r\n  );\r\n};\r\n","D:\\react-second\\Todos\\todos\\src\\Components\\TaskContainer.jsx",[],"D:\\react-second\\Todos\\todos\\src\\Components\\Categories.jsx",[],"D:\\react-second\\Todos\\todos\\src\\Components\\Task.jsx",[],"D:\\react-second\\Todos\\todos\\src\\Components\\DeleteBtn.jsx",[],"D:\\react-second\\Todos\\todos\\src\\Components\\DoneBtn.jsx",["57"],"import React from \"react\";\r\nimport './styles.css'\r\nimport done_icon from './../images/check2.svg'\r\n\r\nconst DoneBtn = (props) => {\r\n    \r\n    return (\r\n        <div className='doneBtn' onClick={props.completeTask}>\r\n            {props.category && <img className=\"doneIcon\" src={done_icon} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DoneBtn","D:\\react-second\\Todos\\todos\\src\\Api.js",["58","59"],"export default class Api {\r\n  static getTasks() {\r\n    return JSON.parse(localStorage.getItem(\"tasks\") || \"[]\");\r\n  }\r\n  static setTasks(taskToSet) {\r\n    const tasks = Api.getTasks();\r\n\r\n    const task = {\r\n      id: Math.floor(Math.random() * 10000),\r\n      task: taskToSet,\r\n      category: \"active\",\r\n    };\r\n    tasks.push(task);\r\n\r\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n  }\r\n\r\n  static changeTask(id, elemToChange, value) {\r\n    const tasks = Api.getTasks();\r\n    let existing = tasks.find((task) => task.id == id);\r\n\r\n    if (elemToChange === \"category\") {\r\n      existing.category =\r\n        existing.category === \"active\" ? \"complited\" : \"active\";\r\n    } else {\r\n      existing.task = value;\r\n    }\r\n\r\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n  }\r\n\r\n  static changeCategory(category) {\r\n    const tasks = Api.getTasks();\r\n    tasks.forEach(task => task.category = category);\r\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n  }\r\n\r\n  static deleteTask(id) {\r\n    const tasks = Api.getTasks();\r\n\r\n    const newTasks = id\r\n      ? tasks.filter((task) => task.id != id)\r\n      : tasks.filter((task) => task.category !== \"complited\");\r\n\r\n    localStorage.setItem(\"tasks\", JSON.stringify(newTasks));\r\n  }\r\n}\r\n","D:\\react-second\\Todos\\todos\\src\\Components\\TaskItem.jsx",[],"D:\\react-second\\Todos\\todos\\src\\Components\\DeleteAllCompletedTaskBtn.jsx",[],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":20,"column":15,"nodeType":"66","messageId":"67","endLine":20,"endColumn":17},{"ruleId":"68","severity":1,"message":"69","line":9,"column":32,"nodeType":"70","endLine":9,"endColumn":76},{"ruleId":"64","severity":1,"message":"65","line":20,"column":49,"nodeType":"66","messageId":"67","endLine":20,"endColumn":51},{"ruleId":"64","severity":1,"message":"71","line":42,"column":40,"nodeType":"66","messageId":"67","endLine":42,"endColumn":42},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation"]