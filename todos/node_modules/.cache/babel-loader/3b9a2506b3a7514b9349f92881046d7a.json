{"ast":null,"code":"import _slicedToArray from\"D:\\\\react-second\\\\Todos\\\\todos\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";import React,{useEffect,useState}from\"react\";import{FontAwesomeIcon}from\"@fortawesome/react-fontawesome\";import{faCheck}from\"@fortawesome/free-solid-svg-icons\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var TaskInput=function TaskInput(_ref){var addTask=_ref.addTask,tasks=_ref.tasks,toggleTaskCategory=_ref.toggleTaskCategory;var isCompleted=tasks.every(function(task){return task.category===\"complited\";});var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),value=_useState2[0],setValue=_useState2[1];var _useState3=useState(isCompleted),_useState4=_slicedToArray(_useState3,2),completedTasks=_useState4[0],setCompletedTasks=_useState4[1];useEffect(function(){setCompletedTasks(isCompleted);},[isCompleted]);var handleOnChange=function handleOnChange(e){setValue(e.target.value);};var handleOnKeyPress=function handleOnKeyPress(e){if(e.key==\"Enter\"){addTask(value);setValue(\"\");}};var handleOnClick=function handleOnClick(){var category=completedTasks?\"active\":\"complited\";toggleTaskCategory(category);};return/*#__PURE__*/_jsxs(\"div\",{className:\"inputTask\",children:[/*#__PURE__*/_jsx(FontAwesomeIcon,{onClick:handleOnClick,icon:faCheck,className:\"icon \".concat(completedTasks?\"iconActive\":\"\")}),/*#__PURE__*/_jsx(Input,{value:value,onChange:handleOnChange,onKeyPress:handleOnKeyPress})]});};export default TaskInput;var Input=function Input(_ref2){var value=_ref2.value,onChange=_ref2.onChange,onKeyPress=_ref2.onKeyPress;return/*#__PURE__*/_jsx(\"input\",{placeholder:\"What needs to be done?\",value:value,onChange:onChange,onKeyPress:onKeyPress,type:\"text\",maxLength:100});};","map":{"version":3,"sources":["D:/react-second/Todos/todos/src/Components/TaskInput.jsx"],"names":["React","useEffect","useState","FontAwesomeIcon","faCheck","TaskInput","addTask","tasks","toggleTaskCategory","isCompleted","every","task","category","value","setValue","completedTasks","setCompletedTasks","handleOnChange","e","target","handleOnKeyPress","key","handleOnClick","Input","onChange","onKeyPress"],"mappings":"0HAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,OAASC,eAAT,KAAgC,gCAAhC,CACA,OAASC,OAAT,KAAwB,mCAAxB,C,wFAEA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,MAA4C,IAAzCC,CAAAA,OAAyC,MAAzCA,OAAyC,CAAhCC,KAAgC,MAAhCA,KAAgC,CAAzBC,kBAAyB,MAAzBA,kBAAyB,CAC5D,GAAMC,CAAAA,WAAW,CAAGF,KAAK,CAACG,KAAN,CAAY,SAACC,IAAD,QAAUA,CAAAA,IAAI,CAACC,QAAL,GAAkB,WAA5B,EAAZ,CAApB,CAEA,cAA0BV,QAAQ,CAAC,EAAD,CAAlC,wCAAOW,KAAP,eAAcC,QAAd,eACA,eAA4CZ,QAAQ,CAACO,WAAD,CAApD,yCAAOM,cAAP,eAAuBC,iBAAvB,eAEAf,SAAS,CAAC,UAAM,CACde,iBAAiB,CAACP,WAAD,CAAjB,CACD,CAFQ,CAEN,CAACA,WAAD,CAFM,CAAT,CAIA,GAAMQ,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,CAAD,CAAO,CAC1BJ,QAAQ,CAACI,CAAC,CAACC,MAAF,CAASN,KAAV,CAAR,CACH,CAFD,CAIA,GAAMO,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACF,CAAD,CAAO,CAC9B,GAAIA,CAAC,CAACG,GAAF,EAAS,OAAb,CAAsB,CACpBf,OAAO,CAACO,KAAD,CAAP,CACAC,QAAQ,CAAC,EAAD,CAAR,CACD,CACF,CALD,CAOA,GAAMQ,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,CAC1B,GAAMV,CAAAA,QAAQ,CAAGG,cAAc,CAAG,QAAH,CAAc,WAA7C,CACAP,kBAAkB,CAACI,QAAD,CAAlB,CACD,CAHD,CAKA,mBACE,aAAK,SAAS,CAAC,WAAf,wBACE,KAAC,eAAD,EACE,OAAO,CAAEU,aADX,CAEE,IAAI,CAAElB,OAFR,CAGE,SAAS,gBAAUW,cAAc,CAAG,YAAH,CAAkB,EAA1C,CAHX,EADF,cAME,KAAC,KAAD,EACE,KAAK,CAAEF,KADT,CAEE,QAAQ,CAAEI,cAFZ,CAGE,UAAU,CAAEG,gBAHd,EANF,GADF,CAcD,CAxCD,CA0CA,cAAef,CAAAA,SAAf,CAEA,GAAMkB,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,OAAqC,IAAlCV,CAAAA,KAAkC,OAAlCA,KAAkC,CAA3BW,QAA2B,OAA3BA,QAA2B,CAAjBC,UAAiB,OAAjBA,UAAiB,CACjD,mBACE,cACE,WAAW,CAAC,wBADd,CAEE,KAAK,CAAEZ,KAFT,CAGE,QAAQ,CAAEW,QAHZ,CAIE,UAAU,CAAEC,UAJd,CAKE,IAAI,CAAC,MALP,CAME,SAAS,CAAE,GANb,EADF,CAUD,CAXD","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCheck } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst TaskInput = ({ addTask, tasks, toggleTaskCategory }) => {\r\n  const isCompleted = tasks.every((task) => task.category === \"complited\");\r\n\r\n  const [value, setValue] = useState(\"\");\r\n  const [completedTasks, setCompletedTasks] = useState(isCompleted);\r\n\r\n  useEffect(() => {\r\n    setCompletedTasks(isCompleted);\r\n  }, [isCompleted]);\r\n\r\n  const handleOnChange = (e) => {\r\n      setValue(e.target.value);\r\n  };\r\n\r\n  const handleOnKeyPress = (e) => {\r\n    if (e.key == \"Enter\") {\r\n      addTask(value);\r\n      setValue(\"\");\r\n    }\r\n  };\r\n\r\n  const handleOnClick = () => {\r\n    const category = completedTasks ? \"active\" : \"complited\";\r\n    toggleTaskCategory(category);\r\n  };\r\n\r\n  return (\r\n    <div className=\"inputTask\">\r\n      <FontAwesomeIcon\r\n        onClick={handleOnClick}\r\n        icon={faCheck}\r\n        className={`icon ${completedTasks ? \"iconActive\" : \"\"}`}\r\n      />\r\n      <Input\r\n        value={value}\r\n        onChange={handleOnChange}\r\n        onKeyPress={handleOnKeyPress}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskInput;\r\n\r\nconst Input = ({ value, onChange, onKeyPress }) => {\r\n  return (\r\n    <input\r\n      placeholder=\"What needs to be done?\"\r\n      value={value}\r\n      onChange={onChange}\r\n      onKeyPress={onKeyPress}\r\n      type=\"text\"\r\n      maxLength={100}\r\n    />\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}